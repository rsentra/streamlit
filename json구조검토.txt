
하나의 컨텐츠가 탭 2개, 탭에는 소제목이 각각 2개씩 구성된 경우 json표현 방법

1. key를 구조화된 순번으로 부여하는 방법
  data_json1 = 
    {"제목":
      {"탭1":{"소제목1":"소재목1내용html"},
       "탭1":{"소제목2":"소재목2내용html"}
      },
      {"탭2":{"소제목1":"소재목11내용html"},
       "탭2":{"소제목1":"소재목12내용html"}
      }
    }
  => 제목명, 탭명, 소제목명을 json에 넣을 방법이 없음

2. 제목,탭,소제목명을 key로 사용하는 방법
  data_json2 = 
    {"제목명":
      {"탭1명":{"소제목1명":"소재목1내용html"},
       "탭1명":{"소제목2명":"소재목2내용html"}
      },
      {"탭2명":{"소제목11명":"소재목11내용html"},
       "탭2명":{"소제목12명":"소재목12내용html"}
      }
    }
  => 제목명, 탭명, 소제목명을 json의 key로 설정하는 방법임
    이런 방법을 원하는 건지 확인 필요함

 3. json을 중첩시키지 않는 방법
    data_json3 = {
     "title": "제목명",
     "sec1" : {
          "title":"탭1명",
          "para1": { 
             "title" : "소제목1명",
             "contents": "내용1 html"
           },
           "para2": { 
             "title" : "소제목1명",
             "contents": "내용2 html"
           }
        },
      "sec2" : {
          "title":"탭2명",
          "para1": { 
             "title" : "소제목1명",
             "contents": "내용1 html"
           },
           "para2": { 
             "title" : "소제목1명",
             "contents": "내용1 html"
           },
        }
    }

 
 ===tree구조화
    data_json4 = {
     "title": "제목명",
     "section": {
        "sec1" : {
            "title":"탭1명",
            "para": {
              "para1": { 
                "title" : "소제목1명",
                "contents": "내용1 html"
              },
              "para2": { 
                "title" : "소제목1명",
                "contents": "내용2 html"
             }
            }
          }
          "sec2" : {
            "title":"탭2명",
            "para": {
                "para1": { 
                    "title" : "소제목1명",
                    "contents": "내용1 html"
                },
                "para2": { 
                    "title" : "소제목1명",
                    "contents": "내용1 html"
                },
            }
          }
        }
      }
